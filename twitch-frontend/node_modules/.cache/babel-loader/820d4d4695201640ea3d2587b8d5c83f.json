{"ast":null,"code":"// If you don't want to host your server code and client code together, you can \n// pay AWS to host your server with HTTPS then config the api url endpoints like below\n// const SERVER_ORIGIN = '<Your server's url>'; \nconst SERVER_ORIGIN = '';\nconst loginUrl = `${SERVER_ORIGIN}/login`;\nexport const login = credential => {\n  return fetch(loginUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(credential)\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to log in');\n    }\n    return response.json();\n  });\n};\nconst registerUrl = `${SERVER_ORIGIN}/register`;\nexport const register = data => {\n  return fetch(registerUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to register');\n    }\n  });\n};\nconst logoutUrl = `${SERVER_ORIGIN}/logout`;\nexport const logout = () => {\n  return fetch(logoutUrl, {\n    method: 'POST',\n    credentials: 'include'\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to log out');\n    }\n  });\n};\nconst topGamesUrl = `${SERVER_ORIGIN}/game`;\nexport const getTopGames = () => {\n  return fetch(topGamesUrl).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to get top games');\n    }\n    return response.json();\n  });\n};\nconst getGameDetailsUrl = `${SERVER_ORIGIN}/game?game_name=`;\nconst getGameDetails = gameName => {\n  return fetch(`${getGameDetailsUrl}${gameName}`).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to find the game');\n    }\n    return response.json();\n  });\n};\nconst searchGameByIdUrl = `${SERVER_ORIGIN}/search?game_id=`;\nexport const searchGameById = gameId => {\n  return fetch(`${searchGameByIdUrl}${gameId}`).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to find the game');\n    }\n    return response.json();\n  });\n};\nexport const searchGameByName = gameName => {\n  return getGameDetails(gameName).then(data => {\n    if (data && data.id) {\n      return searchGameById(data.id);\n    }\n    throw Error('Fail to find the game');\n  });\n};\nconst favoriteItemUrl = `${SERVER_ORIGIN}/favorite`;\nexport const addFavoriteItem = favItem => {\n  return fetch(favoriteItemUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      favorite: favItem\n    })\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to add favorite item');\n    }\n  });\n};\nexport const deleteFavoriteItem = favItem => {\n  return fetch(favoriteItemUrl, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify({\n      favorite: favItem\n    })\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to delete favorite item');\n    }\n  });\n};\nexport const getFavoriteItem = () => {\n  return fetch(favoriteItemUrl, {\n    credentials: 'include'\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to get favorite item');\n    }\n    return response.json();\n  });\n};\nconst getRecommendedItemsUrl = `${SERVER_ORIGIN}/recommendation`;\nexport const getRecommendations = () => {\n  return fetch(getRecommendedItemsUrl, {\n    credentials: 'include'\n  }).then(response => {\n    if (response.status !== 200) {\n      throw Error('Fail to get recommended item');\n    }\n    return response.json();\n  });\n};","map":{"version":3,"names":["SERVER_ORIGIN","loginUrl","login","credential","fetch","method","headers","credentials","body","JSON","stringify","then","response","status","Error","json","registerUrl","register","data","logoutUrl","logout","topGamesUrl","getTopGames","getGameDetailsUrl","getGameDetails","gameName","searchGameByIdUrl","searchGameById","gameId","searchGameByName","id","favoriteItemUrl","addFavoriteItem","favItem","favorite","deleteFavoriteItem","getFavoriteItem","getRecommendedItemsUrl","getRecommendations"],"sources":["C:/Files/来offer/Twitch项目/twitch_code/Personalized-Twitch-Resources-Recommendation-Engine-main/twitch-frontend/src/utils.js"],"sourcesContent":["// If you don't want to host your server code and client code together, you can \n// pay AWS to host your server with HTTPS then config the api url endpoints like below\n// const SERVER_ORIGIN = '<Your server's url>'; \nconst SERVER_ORIGIN = '';\n \nconst loginUrl = `${SERVER_ORIGIN}/login`;\n\nexport const login = (credential) => {\n  return fetch(loginUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n    body: JSON.stringify(credential)\n  }).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to log in');\n    }\n \n    return response.json();\n  })\n}\n \nconst registerUrl = `${SERVER_ORIGIN}/register`;\n \nexport const register = (data) => {\n  return fetch(registerUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data)\n  }).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to register');\n    }\n  })\n}\n \nconst logoutUrl = `${SERVER_ORIGIN}/logout`;\n \nexport const logout = () => {\n  return fetch(logoutUrl, {\n    method: 'POST',\n    credentials: 'include',\n  }).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to log out');\n    }\n  })\n}\n \nconst topGamesUrl = `${SERVER_ORIGIN}/game`;\n \nexport const getTopGames = () => {\n  return fetch(topGamesUrl).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to get top games');\n    }\n \n    return response.json();\n  })\n}\n \nconst getGameDetailsUrl = `${SERVER_ORIGIN}/game?game_name=`;\n \nconst getGameDetails = (gameName) => {\n  return fetch(`${getGameDetailsUrl}${gameName}`).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to find the game');\n    }\n \n    return response.json();\n  });\n}\n \nconst searchGameByIdUrl = `${SERVER_ORIGIN}/search?game_id=`;\n \nexport const searchGameById = (gameId) => {\n  return fetch(`${searchGameByIdUrl}${gameId}`).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to find the game');\n    }\n    return response.json();\n  })\n}\n \nexport const searchGameByName = (gameName) => {\n  return getGameDetails(gameName).then((data) => {\n    if (data && data.id) {\n      return searchGameById(data.id);\n    }\n \n    throw Error('Fail to find the game')\n  })\n}\n \nconst favoriteItemUrl = `${SERVER_ORIGIN}/favorite`;\n \nexport const addFavoriteItem = (favItem) => {\n  return fetch(favoriteItemUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n    body: JSON.stringify({ favorite: favItem })\n  }).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to add favorite item');\n    }\n  })\n}\n \nexport const deleteFavoriteItem = (favItem) => {\n  return fetch(favoriteItemUrl, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n    body: JSON.stringify({ favorite: favItem })\n  }).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to delete favorite item');\n    }\n  })\n}\n \nexport const getFavoriteItem = () => {\n  return fetch(favoriteItemUrl, {\n    credentials: 'include',\n  }).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to get favorite item');\n    }\n \n    return response.json();\n  })\n}\n \nconst getRecommendedItemsUrl = `${SERVER_ORIGIN}/recommendation`;\n \nexport const getRecommendations = () => {\n  return fetch(getRecommendedItemsUrl, {\n    credentials: 'include',\n  }).then((response) => {\n    if (response.status !== 200) {\n      throw Error('Fail to get recommended item');\n    }\n \n    return response.json();\n  })\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}